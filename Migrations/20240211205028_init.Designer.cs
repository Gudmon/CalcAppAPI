// <auto-generated />
using CalcAppAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CalcAppAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240211205028_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BrakeTrailer", b =>
                {
                    b.Property<int>("BrakeId")
                        .HasColumnType("int");

                    b.Property<int>("TrailerId")
                        .HasColumnType("int");

                    b.HasKey("BrakeId", "TrailerId");

                    b.HasIndex("TrailerId");

                    b.ToTable("BrakeTrailer", (string)null);

                    b.HasData(
                        new
                        {
                            BrakeId = 1,
                            TrailerId = 1
                        },
                        new
                        {
                            BrakeId = 2,
                            TrailerId = 1
                        });
                });

            modelBuilder.Entity("CalcAppAPI.Models.Crane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrutLiftingTorque190Bar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrutLiftingTorque215Bar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrutLiftingTorque240Bar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CraneWeight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiftAtFourMeters190Bar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiftAtFourMeters215Bar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiftAtFourMeters240Bar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiftAtFullReach190Bar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiftAtFullReach215Bar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiftAtFullReach240Bar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxReach")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PillarSlewingAngle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecommendedOilFLow")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RotatorMaximumLoad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Series")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlewingCylinder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SlewingTorque")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkingPressure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Crane");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrutLiftingTorque190Bar = "26",
                            BrutLiftingTorque215Bar = "-",
                            BrutLiftingTorque240Bar = "-",
                            CraneWeight = "360",
                            Description = "Ideális választás azoknak a vásárlóknak, akik egyszerűséget, könnyűséget és kompakt méretet keresnek. Kompatibilis a PALMS 6S és 8SX pótkocsikkal.",
                            LiftAtFourMeters190Bar = "570",
                            LiftAtFourMeters215Bar = "-",
                            LiftAtFourMeters240Bar = "-",
                            LiftAtFullReach190Bar = "540",
                            LiftAtFullReach215Bar = "-",
                            LiftAtFullReach240Bar = "-",
                            MaxReach = "4.2",
                            Name = "PALMS 2.42",
                            PillarSlewingAngle = "370",
                            Price = "5165",
                            RecommendedOilFLow = "20-35",
                            RotatorMaximumLoad = "45",
                            Series = "2",
                            SlewingCylinder = "4",
                            SlewingTorque = "7.8",
                            WorkingPressure = "190"
                        },
                        new
                        {
                            Id = 2,
                            BrutLiftingTorque190Bar = "26",
                            BrutLiftingTorque215Bar = "29",
                            BrutLiftingTorque240Bar = "-",
                            CraneWeight = "400",
                            Description = "Kompakt és könnyű daru, ideális városi parkokhoz és más környezetvédelmi érzékeny területekhez. Rögzíthető különböző platformokra, erdészeti pótkocsiktól és teherautóktól kezdve a mini-forwarderekig. Kompatibilis a PALMS 6S és 8SX pótkocsikkal.",
                            LiftAtFourMeters190Bar = "530",
                            LiftAtFourMeters215Bar = "600",
                            LiftAtFourMeters240Bar = "-",
                            LiftAtFullReach190Bar = "370",
                            LiftAtFullReach215Bar = "410",
                            LiftAtFullReach240Bar = "-",
                            MaxReach = "5.4",
                            Name = "PALMS 2.54",
                            PillarSlewingAngle = "370",
                            Price = "6285",
                            RecommendedOilFLow = "20-35",
                            RotatorMaximumLoad = "45",
                            Series = "2",
                            SlewingCylinder = "4",
                            SlewingTorque = "7.8",
                            WorkingPressure = "190/215"
                        },
                        new
                        {
                            Id = 3,
                            BrutLiftingTorque190Bar = "36",
                            BrutLiftingTorque215Bar = "-",
                            BrutLiftingTorque240Bar = "-",
                            CraneWeight = "415",
                            Description = "Kis erdőtulajdonosoknak tervezett daru a tűzifa előkészítésére saját maguk és szomszédos háztartások számára. Kompatibilis a PALMS 6S és 8SX pótkocsikkal.",
                            LiftAtFourMeters190Bar = "355",
                            LiftAtFourMeters215Bar = "-",
                            LiftAtFourMeters240Bar = "-",
                            LiftAtFullReach190Bar = "-",
                            LiftAtFullReach215Bar = "-",
                            LiftAtFullReach240Bar = "-",
                            MaxReach = "6.3",
                            Name = "PALMS 3.63",
                            PillarSlewingAngle = "370",
                            Price = "6985",
                            RecommendedOilFLow = "20-35",
                            RotatorMaximumLoad = "45",
                            Series = "3",
                            SlewingCylinder = "4",
                            SlewingTorque = "9",
                            WorkingPressure = "190"
                        },
                        new
                        {
                            Id = 4,
                            BrutLiftingTorque190Bar = "41",
                            BrutLiftingTorque215Bar = "46",
                            BrutLiftingTorque240Bar = "-",
                            CraneWeight = "620",
                            Description = "Egy gazda legjobb társa, kiváló teljesítményt nyújtva tűzifa előkészítésében és általános emelési feladatokban a gazdaságokon. Kompatibilis a PALMS 8SX, 8D, 9SC és 10D pótkocsikkal.",
                            LiftAtFourMeters190Bar = "820",
                            LiftAtFourMeters215Bar = "910",
                            LiftAtFourMeters240Bar = "-",
                            LiftAtFullReach190Bar = "430",
                            LiftAtFullReach215Bar = "480",
                            LiftAtFullReach240Bar = "-",
                            MaxReach = "6.7",
                            Name = "PALMS 3.67",
                            PillarSlewingAngle = "370",
                            Price = "8260",
                            RecommendedOilFLow = "30-45",
                            RotatorMaximumLoad = "45",
                            Series = "3",
                            SlewingCylinder = "4",
                            SlewingTorque = "12",
                            WorkingPressure = "190/215"
                        },
                        new
                        {
                            Id = 5,
                            BrutLiftingTorque190Bar = "48",
                            BrutLiftingTorque215Bar = "54",
                            BrutLiftingTorque240Bar = "-",
                            CraneWeight = "710",
                            Description = "Versatile medium-sized crane, used across diverse sectors like arboriculture, farming, and land development. Compatible with the majority of PALMS trailers.",
                            LiftAtFourMeters190Bar = "960",
                            LiftAtFourMeters215Bar = "1040",
                            LiftAtFourMeters240Bar = "-",
                            LiftAtFullReach190Bar = "480",
                            LiftAtFullReach215Bar = "535",
                            LiftAtFullReach240Bar = "-",
                            MaxReach = "7.1",
                            Name = "PALMS 4.71",
                            PillarSlewingAngle = "370",
                            Price = "9450",
                            RecommendedOilFLow = "45-70",
                            RotatorMaximumLoad = "45",
                            Series = "4",
                            SlewingCylinder = "4",
                            SlewingTorque = "15",
                            WorkingPressure = "190/215"
                        });
                });

            modelBuilder.Entity("CalcAppAPI.Models.Machine.Configurations.Trailers.Brake", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brake");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "B0",
                            Name = "Fék nélkül",
                            Price = "0"
                        },
                        new
                        {
                            Id = 2,
                            Code = "B1",
                            Name = "2 keréken hidraulikus fék",
                            Price = "960"
                        },
                        new
                        {
                            Id = 3,
                            Code = "B2",
                            Name = "4 keréken hidraulikus fék",
                            Price = "1810"
                        },
                        new
                        {
                            Id = 4,
                            Code = "B3",
                            Name = "2 keréken légfék",
                            Price = "1615"
                        },
                        new
                        {
                            Id = 5,
                            Code = "B4",
                            Name = "4 keréken légfék",
                            Price = "2640"
                        },
                        new
                        {
                            Id = 6,
                            Code = "BA-EU",
                            Name = "Légfék",
                            Price = "2095"
                        },
                        new
                        {
                            Id = 7,
                            Code = "BH-EU",
                            Name = "Hidraulikus fék",
                            Price = "3450"
                        });
                });

            modelBuilder.Entity("CalcAppAPI.Models.Machine.Configurations.Trailers.Drawbar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Drawbar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "C1",
                            Name = "Skandináv típusú forgó vonórúd",
                            Price = "0"
                        },
                        new
                        {
                            Id = 2,
                            Code = "C2",
                            Name = "Német típusú magas vonórúd vonószem nélkül",
                            Price = "0"
                        },
                        new
                        {
                            Id = 3,
                            Code = "C3",
                            Name = "Osztrák típusú alacsony vonórúd vonószem nélkül",
                            Price = "0"
                        },
                        new
                        {
                            Id = 4,
                            Code = "C4",
                            Name = "Német típusú magas vonórúd vonószemmel",
                            Price = "275"
                        },
                        new
                        {
                            Id = 5,
                            Code = "C5",
                            Name = "Osztrák típusú magas vonórúd vonószemmel",
                            Price = "275"
                        },
                        new
                        {
                            Id = 6,
                            Code = "C6",
                            Name = "Német típusú magas vonórúd vonószemmel",
                            Price = "430"
                        },
                        new
                        {
                            Id = 7,
                            Code = "C7",
                            Name = "Magas ráfutófékes vonórúd vonószemmel, kábelekkel és 2 kerék fékkel",
                            Price = "1675"
                        },
                        new
                        {
                            Id = 8,
                            Code = "C6",
                            Name = "K-80 típusú alacsony vonórúd vonószemmel",
                            Price = "470"
                        },
                        new
                        {
                            Id = 9,
                            Code = "C9",
                            Name = "Osztrák típusú alacsony vonórúd elforduló vonószemmel",
                            Price = "525"
                        });
                });

            modelBuilder.Entity("CalcAppAPI.Models.Machine.Configurations.Trailers.OilPump", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OilPump");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "P01",
                            Name = "Szivattyú adapter a vonórúdon",
                            Price = "60"
                        },
                        new
                        {
                            Id = 2,
                            Code = "P1",
                            Name = "101 cm3 dugattyús olajmpumpa a vonórúdon, 650 p/min - 65 l/min",
                            Price = "1155"
                        },
                        new
                        {
                            Id = 3,
                            Code = "P2",
                            Name = "130 cm3 dugattyús olajmpuma a vonórúdon, 650 p/min - 82 l/min",
                            Price = "1575"
                        },
                        new
                        {
                            Id = 4,
                            Code = "P4",
                            Name = "61 cm3 dugattyús olajpumpa multiplikátorral a vonórúdon, 650 p/min - 98 l/min",
                            Price = "1995"
                        },
                        new
                        {
                            Id = 5,
                            Code = "P4PTO",
                            Name = "P4 olajmpumla PTO-val 650 p/min - 98 l/min (rögzítő konzol nélkül)",
                            Price = "1995"
                        },
                        new
                        {
                            Id = 6,
                            Code = "P6",
                            Name = "LS fajtájú olajmpumpa multiplikátorral, 650 p/min - 120 l/min",
                            Price = "4305"
                        },
                        new
                        {
                            Id = 7,
                            Code = "P6PTO",
                            Name = "P6 olajpumpa PTO-val 650 p/min - 120 l/min (rögzítő konzol nélkül)",
                            Price = "4305"
                        });
                });

            modelBuilder.Entity("CalcAppAPI.Models.Machine.Configurations.Trailers.OilTank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OilTank");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "T2",
                            Name = "95 l-es olajtartály",
                            Price = "1000"
                        },
                        new
                        {
                            Id = 2,
                            Code = "T2+",
                            Name = "95 l-es olajtartály HVLP olajjal",
                            Price = "1290"
                        },
                        new
                        {
                            Id = 3,
                            Code = "T2SOV",
                            Name = "95 l-es olajtartály HVLP olajjal, elzáró csappal",
                            Price = "1200"
                        },
                        new
                        {
                            Id = 4,
                            Code = "T2SOV+",
                            Name = "95 l-es olajtartály HVLP olajjal, elzáró csappal, olajszűrővel",
                            Price = "1490"
                        });
                });

            modelBuilder.Entity("CalcAppAPI.Models.Machine.Configurations.Trailers.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Platform");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "D1",
                            Name = "Kezelő platform háttámlával a vonórúdon",
                            Price = "600"
                        },
                        new
                        {
                            Id = 2,
                            Code = "D2",
                            Name = "Kezelő platform háttámlával a vonórúdon túlfutásgátlós vonórúddal",
                            Price = "600"
                        });
                });

            modelBuilder.Entity("CalcAppAPI.Models.Machine.Configurations.Trailers.Propulsion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Propulsion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "RWD",
                            Name = "Robson WD dörzshajtás (traktor hidarulikáról)",
                            Price = "5280"
                        },
                        new
                        {
                            Id = 2,
                            Code = "RWD+",
                            Name = "Robson WD dörzshajtás elektronikus vezérlőrendszerrel",
                            Price = "7600"
                        });
                });

            modelBuilder.Entity("CalcAppAPI.Models.Machine.Configurations.Trailers.Stanchion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stanchion");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "A3",
                            Name = "Pótkocsi 3 pár rakoncával",
                            Price = "5285"
                        },
                        new
                        {
                            Id = 2,
                            Code = "A4",
                            Name = "Pótkocsi 4 pár rakoncával",
                            Price = "5800"
                        },
                        new
                        {
                            Id = 3,
                            Code = "A3",
                            Name = "Pótkocsi 3 pár rakoncával",
                            Price = "6930"
                        },
                        new
                        {
                            Id = 4,
                            Code = "A4",
                            Name = "Pótkocsi 4 pár rakoncával",
                            Price = "7390"
                        },
                        new
                        {
                            Id = 5,
                            Code = "A4Ex",
                            Name = "Pótkocsi raktérhosszabbítással és 4 pár rakoncával",
                            Price = "7700"
                        },
                        new
                        {
                            Id = 6,
                            Code = "A5Ex",
                            Name = "Pótkocsi raktérhosszabbítással és 5 pár rakoncával",
                            Price = "8160"
                        },
                        new
                        {
                            Id = 7,
                            Code = "A3",
                            Name = "Pótkocsi 3 pár rakoncával",
                            Price = "7340"
                        },
                        new
                        {
                            Id = 8,
                            Code = "A4",
                            Name = "Pótkocsi 4 pár rakoncával",
                            Price = "7710"
                        },
                        new
                        {
                            Id = 9,
                            Code = "A4Ex",
                            Name = "Pótkocsi raktérhosszabbítással és 4 pár rakoncával",
                            Price = "8330"
                        },
                        new
                        {
                            Id = 10,
                            Code = "A5Ex",
                            Name = "Pótkocsi raktérhosszabbítással és 5 pár rakoncával",
                            Price = "8695"
                        });
                });

            modelBuilder.Entity("CalcAppAPI.Models.Trailer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BeamType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurbWeight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrawbarControlCylinders")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frame")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrameExtensionLength")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrossWeight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadingAreaCross")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoadingAreaLength")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaxCraneSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StandardWheelSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalLength")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WidthWithStandardWheels")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Trailer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeamType = "Single",
                            CurbWeight = "890",
                            Description = "A PALMS 6S egyetlen gerendás erdészeti pótkocsi, melynek nominális teherbírása 6 tonna. Könnyű és kompakt kialakítása tökéletes választás kisebb traktorokhoz, ideális magán-erdőgazdálkodáshoz és gazdálkodóknak. A PALMS 6S hasonló technológiákat használ, mint nagyobb pótkocsijaink, beleértve a magas minőségű KTL és porfestési bevonatot, ami hosszabb élettartamot és nagyobb újraértékesítési értéket biztosít.",
                            DrawbarControlCylinders = "1",
                            Frame = "140x140x6",
                            FrameExtensionLength = "-",
                            GrossWeight = "8500",
                            LoadingAreaCross = "1.5",
                            LoadingAreaLength = "3000",
                            MaxCraneSize = "35",
                            Name = "PALMS 6S",
                            Price = "",
                            StandardWheelSize = "400/60-15,5",
                            TotalLength = "4900",
                            WidthWithStandardWheels = "1950"
                        },
                        new
                        {
                            Id = 2,
                            BeamType = "Single",
                            CurbWeight = "1180",
                            Description = "PALMS 8SX is a single-beam forest trailer with a nominal load capacity of 8 tons. It stands as a popular choice among many small forest landowners and farmers. The trailer's simple yet robust construction and durability make it a reliable companion for various forestry and agricultural tasks.",
                            DrawbarControlCylinders = "2",
                            Frame = "160x160x8",
                            FrameExtensionLength = "0.61",
                            GrossWeight = "10000",
                            LoadingAreaCross = "2",
                            LoadingAreaLength = "3550",
                            MaxCraneSize = "47",
                            Name = "PALMS 8SX",
                            Price = "",
                            StandardWheelSize = "400/60-15,5",
                            TotalLength = "5690",
                            WidthWithStandardWheels = "2070"
                        },
                        new
                        {
                            Id = 3,
                            BeamType = "Single",
                            CurbWeight = "1425",
                            Description = "PALMS 9SC is our largest single-beam trailer in the product lineup with a nominal load capacity of 9 tons. It is ideal for customers who prefer the simplicity of a single-beam trailer while requiring a longer reach from a forestry crane. This feature makes it a popular choice, for example, among arborists. Additionally, PALMS 9SC stands out in user convenience among other single-beam trailers with its drawbar quick-lock system and patented bolster locks.",
                            DrawbarControlCylinders = "2",
                            Frame = "200x200x8",
                            FrameExtensionLength = "0.70",
                            GrossWeight = "12000",
                            LoadingAreaCross = "2.15",
                            LoadingAreaLength = "3870",
                            MaxCraneSize = "65",
                            Name = "PALMS 9SC",
                            Price = "",
                            StandardWheelSize = "400/60-15,5",
                            TotalLength = "6095",
                            WidthWithStandardWheels = "2135"
                        });
                });

            modelBuilder.Entity("CraneTrailer", b =>
                {
                    b.Property<int>("CraneId")
                        .HasColumnType("int");

                    b.Property<int>("TrailerId")
                        .HasColumnType("int");

                    b.HasKey("CraneId", "TrailerId");

                    b.HasIndex("TrailerId");

                    b.ToTable("CraneTrailer", (string)null);

                    b.HasData(
                        new
                        {
                            CraneId = 1,
                            TrailerId = 1
                        },
                        new
                        {
                            CraneId = 2,
                            TrailerId = 1
                        },
                        new
                        {
                            CraneId = 1,
                            TrailerId = 2
                        },
                        new
                        {
                            CraneId = 2,
                            TrailerId = 2
                        });
                });

            modelBuilder.Entity("DrawbarTrailer", b =>
                {
                    b.Property<int>("DrawbarId")
                        .HasColumnType("int");

                    b.Property<int>("TrailerId")
                        .HasColumnType("int");

                    b.HasKey("DrawbarId", "TrailerId");

                    b.HasIndex("TrailerId");

                    b.ToTable("DrawbarTrailer", (string)null);

                    b.HasData(
                        new
                        {
                            DrawbarId = 4,
                            TrailerId = 1
                        },
                        new
                        {
                            DrawbarId = 5,
                            TrailerId = 1
                        },
                        new
                        {
                            DrawbarId = 9,
                            TrailerId = 1
                        },
                        new
                        {
                            DrawbarId = 4,
                            TrailerId = 2
                        },
                        new
                        {
                            DrawbarId = 5,
                            TrailerId = 2
                        },
                        new
                        {
                            DrawbarId = 6,
                            TrailerId = 2
                        },
                        new
                        {
                            DrawbarId = 7,
                            TrailerId = 2
                        },
                        new
                        {
                            DrawbarId = 9,
                            TrailerId = 2
                        },
                        new
                        {
                            DrawbarId = 4,
                            TrailerId = 3
                        },
                        new
                        {
                            DrawbarId = 5,
                            TrailerId = 3
                        },
                        new
                        {
                            DrawbarId = 6,
                            TrailerId = 3
                        },
                        new
                        {
                            DrawbarId = 9,
                            TrailerId = 3
                        });
                });

            modelBuilder.Entity("OilPumpTrailer", b =>
                {
                    b.Property<int>("OilPumpId")
                        .HasColumnType("int");

                    b.Property<int>("TrailerId")
                        .HasColumnType("int");

                    b.HasKey("OilPumpId", "TrailerId");

                    b.HasIndex("TrailerId");

                    b.ToTable("OilPumpTrailer", (string)null);

                    b.HasData(
                        new
                        {
                            OilPumpId = 1,
                            TrailerId = 2
                        },
                        new
                        {
                            OilPumpId = 2,
                            TrailerId = 2
                        },
                        new
                        {
                            OilPumpId = 3,
                            TrailerId = 2
                        },
                        new
                        {
                            OilPumpId = 4,
                            TrailerId = 2
                        },
                        new
                        {
                            OilPumpId = 5,
                            TrailerId = 2
                        },
                        new
                        {
                            OilPumpId = 6,
                            TrailerId = 2
                        },
                        new
                        {
                            OilPumpId = 7,
                            TrailerId = 2
                        },
                        new
                        {
                            OilPumpId = 1,
                            TrailerId = 3
                        },
                        new
                        {
                            OilPumpId = 2,
                            TrailerId = 3
                        },
                        new
                        {
                            OilPumpId = 3,
                            TrailerId = 3
                        },
                        new
                        {
                            OilPumpId = 4,
                            TrailerId = 3
                        },
                        new
                        {
                            OilPumpId = 5,
                            TrailerId = 3
                        },
                        new
                        {
                            OilPumpId = 6,
                            TrailerId = 3
                        },
                        new
                        {
                            OilPumpId = 7,
                            TrailerId = 3
                        });
                });

            modelBuilder.Entity("OilTankTrailer", b =>
                {
                    b.Property<int>("OilTankId")
                        .HasColumnType("int");

                    b.Property<int>("TrailerId")
                        .HasColumnType("int");

                    b.HasKey("OilTankId", "TrailerId");

                    b.HasIndex("TrailerId");

                    b.ToTable("OilTankTrailer", (string)null);

                    b.HasData(
                        new
                        {
                            OilTankId = 1,
                            TrailerId = 2
                        },
                        new
                        {
                            OilTankId = 2,
                            TrailerId = 2
                        },
                        new
                        {
                            OilTankId = 3,
                            TrailerId = 2
                        },
                        new
                        {
                            OilTankId = 4,
                            TrailerId = 2
                        },
                        new
                        {
                            OilTankId = 1,
                            TrailerId = 3
                        },
                        new
                        {
                            OilTankId = 2,
                            TrailerId = 3
                        },
                        new
                        {
                            OilTankId = 3,
                            TrailerId = 3
                        },
                        new
                        {
                            OilTankId = 4,
                            TrailerId = 3
                        });
                });

            modelBuilder.Entity("PlatformTrailer", b =>
                {
                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.Property<int>("TrailerId")
                        .HasColumnType("int");

                    b.HasKey("PlatformId", "TrailerId");

                    b.HasIndex("TrailerId");

                    b.ToTable("PlatformTrailer", (string)null);

                    b.HasData(
                        new
                        {
                            PlatformId = 1,
                            TrailerId = 1
                        },
                        new
                        {
                            PlatformId = 1,
                            TrailerId = 2
                        },
                        new
                        {
                            PlatformId = 2,
                            TrailerId = 2
                        },
                        new
                        {
                            PlatformId = 1,
                            TrailerId = 3
                        },
                        new
                        {
                            PlatformId = 2,
                            TrailerId = 3
                        });
                });

            modelBuilder.Entity("PropulsionTrailer", b =>
                {
                    b.Property<int>("PropulsionId")
                        .HasColumnType("int");

                    b.Property<int>("TrailerId")
                        .HasColumnType("int");

                    b.HasKey("PropulsionId", "TrailerId");

                    b.HasIndex("TrailerId");

                    b.ToTable("PropulsionTrailer", (string)null);

                    b.HasData(
                        new
                        {
                            PropulsionId = 1,
                            TrailerId = 3
                        },
                        new
                        {
                            PropulsionId = 2,
                            TrailerId = 3
                        });
                });

            modelBuilder.Entity("StanchionTrailer", b =>
                {
                    b.Property<int>("StanchionId")
                        .HasColumnType("int");

                    b.Property<int>("TrailerId")
                        .HasColumnType("int");

                    b.HasKey("StanchionId", "TrailerId");

                    b.HasIndex("TrailerId");

                    b.ToTable("StanchionTrailer", (string)null);

                    b.HasData(
                        new
                        {
                            StanchionId = 1,
                            TrailerId = 1
                        },
                        new
                        {
                            StanchionId = 2,
                            TrailerId = 1
                        },
                        new
                        {
                            StanchionId = 3,
                            TrailerId = 2
                        },
                        new
                        {
                            StanchionId = 4,
                            TrailerId = 2
                        },
                        new
                        {
                            StanchionId = 5,
                            TrailerId = 2
                        },
                        new
                        {
                            StanchionId = 6,
                            TrailerId = 2
                        },
                        new
                        {
                            StanchionId = 7,
                            TrailerId = 3
                        },
                        new
                        {
                            StanchionId = 8,
                            TrailerId = 3
                        },
                        new
                        {
                            StanchionId = 9,
                            TrailerId = 3
                        },
                        new
                        {
                            StanchionId = 10,
                            TrailerId = 3
                        });
                });

            modelBuilder.Entity("BrakeTrailer", b =>
                {
                    b.HasOne("CalcAppAPI.Models.Machine.Configurations.Trailers.Brake", null)
                        .WithMany()
                        .HasForeignKey("BrakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CalcAppAPI.Models.Trailer", null)
                        .WithMany()
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CraneTrailer", b =>
                {
                    b.HasOne("CalcAppAPI.Models.Crane", null)
                        .WithMany()
                        .HasForeignKey("CraneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CalcAppAPI.Models.Trailer", null)
                        .WithMany()
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrawbarTrailer", b =>
                {
                    b.HasOne("CalcAppAPI.Models.Machine.Configurations.Trailers.Drawbar", null)
                        .WithMany()
                        .HasForeignKey("DrawbarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CalcAppAPI.Models.Trailer", null)
                        .WithMany()
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OilPumpTrailer", b =>
                {
                    b.HasOne("CalcAppAPI.Models.Machine.Configurations.Trailers.OilPump", null)
                        .WithMany()
                        .HasForeignKey("OilPumpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CalcAppAPI.Models.Trailer", null)
                        .WithMany()
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OilTankTrailer", b =>
                {
                    b.HasOne("CalcAppAPI.Models.Machine.Configurations.Trailers.OilTank", null)
                        .WithMany()
                        .HasForeignKey("OilTankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CalcAppAPI.Models.Trailer", null)
                        .WithMany()
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlatformTrailer", b =>
                {
                    b.HasOne("CalcAppAPI.Models.Machine.Configurations.Trailers.Platform", null)
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CalcAppAPI.Models.Trailer", null)
                        .WithMany()
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PropulsionTrailer", b =>
                {
                    b.HasOne("CalcAppAPI.Models.Machine.Configurations.Trailers.Propulsion", null)
                        .WithMany()
                        .HasForeignKey("PropulsionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CalcAppAPI.Models.Trailer", null)
                        .WithMany()
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StanchionTrailer", b =>
                {
                    b.HasOne("CalcAppAPI.Models.Machine.Configurations.Trailers.Stanchion", null)
                        .WithMany()
                        .HasForeignKey("StanchionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CalcAppAPI.Models.Trailer", null)
                        .WithMany()
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
